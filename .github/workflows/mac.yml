name: MacOS.

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '*.md'

jobs:

  macos:
    name: MacOS
    runs-on: macos-latest

    strategy:
      matrix:
        defines:
          - ""
    env:
      MIN_MAC: "-mmacosx-version-min=10.12"
      UNGUARDED: "-Werror=unguarded-availability-new"
      GIT: "https://github.com"
      PREFIX: "/usr/local/macos"
      MACOSX_DEPLOYMENT_TARGET: "10.12"
      XZ: "xz-5.0.5"
      QT: "5_12_8"
      OPENSSL_VER: "1_1_1"
      QT_PREFIX: "/usr/local/desktop-app/Qt-5.12.8"
      LIBICONV_VER: "libiconv-1.15"
      UPLOAD_ARTIFACT: "true"
      ONLY_CACHE: "false"
      MANUAL_CACHING: "1"
      DOC_PATH: "docs/building-xcode.md"
      AUTO_CACHING: "1"

    steps:
      - name: Get repository name.
        run: echo ::set-env name=REPO_NAME::${GITHUB_REPOSITORY##*/}

      - name: Clone.
        uses: actions/checkout@v1
        with:
          submodules: recursive

      - name: First set up.
        run: |
          cd ..
          mv $REPO_NAME temp
          mkdir $REPO_NAME
          mv temp $REPO_NAME/$REPO_NAME
          cd $REPO_NAME
          brew install automake cmake fdk-aac git lame libass libtool libvorbis \
          libvpx ninja opus sdl shtool texi2html theora wget x264 xvid yasm pkg-config
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          xcodebuild -version > CACHE_KEY.txt
          echo $MIN_MAC >> CACHE_KEY.txt
          echo $PREFIX >> CACHE_KEY.txt
          echo $MANUAL_CACHING >> CACHE_KEY.txt
          if [ "$AUTO_CACHING" == "1" ]; then
            thisFile=$REPO_NAME/.github/workflows/mac.yml
            echo `md5 -q $thisFile` >> CACHE_KEY.txt
          fi
          echo ::set-env name=CACHE_KEY::`md5 -q CACHE_KEY.txt`
          echo ::add-path::$PWD/Libraries/depot_tools
          mkdir -p Libraries/macos
          cd Libraries/macos
          echo ::set-env name=LibrariesPath::`pwd`
      - name: Range-v3.
        run: |
          echo "Find necessary branch from doc."
          cloneRange=$(grep -A 1 "range-v3" $REPO_NAME/$DOC_PATH | sed -n 1p)
          cd $LibrariesPath
          echo $cloneRange
          eval $cloneRange
      - name: Patches.
        run: |
          echo "Find necessary commit from doc."
          checkoutCommit=$(grep -A 1 "cd patches" $REPO_NAME/$DOC_PATH | sed -n 2p)
          cd $LibrariesPath
          git clone $GIT/desktop-app/patches.git
          cd Patches
          eval $checkoutCommit
      - name: XZ.
        run: |
          cd $LibrariesPath
          wget https://tukaani.org/xz/$XZ.tar.gz
          tar -xvzf $XZ.tar.gz
          cd $XZ
          CFLAGS="$MIN_MAC" LDFLAGS="$MIN_MAC" ./configure --prefix=$PREFIX
          make -j$(nproc)
          sudo make install
      - name: Zlib.
        run: |
          cd $LibrariesPath
          git clone $GIT/desktop-app/zlib.git
          cd zlib
          CFLAGS="$MIN_MAC $UNGUARDED" LDFLAGS="$MIN_MAC" ./configure --prefix=$PREFIX
          make -j$(nproc)
          sudo make install
      - name: OpenSSL cache.
        id: cache-openssl
        uses: actions/cache@v1
        with:
          path: ${{ env.LibrariesPath }}/openssl_${{ env.OPENSSL_VER }}
          key: ${{ runner.OS }}-${{ env.OPENSSL_VER }}-${{ env.CACHE_KEY }}
      - name: OpenSSL.
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          cd $LibrariesPath
          git clone $GIT/openssl/openssl openssl
          cd openssl
          git checkout OpenSSL_"$OPENSSL_VER"-stable
          ./Configure \
          --prefix=$PREFIX \
          darwin64-x86_64-cc \
          -static \
          $MIN_MAC
          make build_libs -j$(nproc)
          SSL_DIR=$LibrariesPath/openssl_${{ env.OPENSSL_VER }}
          mkdir -p $SSL_DIR/include
          copyLib() {
            cp $1.a $SSL_DIR/$1.a
          }
          copyLib libssl
          copyLib libcrypto
          sudo cp -R include/. $SSL_DIR/include/
      - name: Crashpad cache.
        id: cache-crashpad
        uses: actions/cache@v1
        with:
          path: ${{ env.LibrariesPath }}/crashpad
          key: ${{ runner.OS }}-crashpad-${{ env.CACHE_KEY }}-${{ hashFiles('**/crashpad.diff') }}-${{ hashFiles('**/mini_chromium.diff') }}
      - name: Crashpad.
        if: steps.cache-crashpad.outputs.cache-hit != 'true'
        run: |
          cd Libraries
          echo Install GYP for Crashpad.
          git clone https://chromium.googlesource.com/external/gyp
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          cd gyp
          git checkout 9f2a7bb1
          git apply $LibrariesPath/patches/gyp.diff
          ./setup.py build
          sudo ./setup.py install
          cd $LibrariesPath
          git clone https://chromium.googlesource.com/crashpad/crashpad.git
          cd crashpad
          git checkout feb3aa3923
          git apply ../patches/crashpad.diff
          cd third_party/mini_chromium
          git clone https://chromium.googlesource.com/chromium/mini_chromium
          cd mini_chromium
          git checkout 7c5b0c1ab4
          git apply ../../../../patches/mini_chromium.diff
          cd ../../gtest
          git clone https://chromium.googlesource.com/external/github.com/google/googletest gtest
          cd gtest
          git checkout d62d6c6556
          cd ../../..
          build/gyp_crashpad.py -Dmac_deployment_target=10.10
          ninja -C out/Debug
      - name: Qt 5.12.8 cache.
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ${{ env.LibrariesPath }}/qt-cache
          key: ${{ runner.OS }}-qt-${{ env.CACHE_KEY }}-${{ hashFiles('**/qtbase_5_12_8.diff') }}
      - name: Use cached Qt 5.12.8.
        if: steps.cache-qt.outputs.cache-hit == 'true'
        run: |
          cd $LibrariesPath
          mv qt-cache Qt-5.12.8
          sudo mkdir -p $QT_PREFIX
          sudo mv -f Qt-5.12.8 "$(dirname "$QT_PREFIX")"/
      - name: Qt 5.12.8 build.
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          cd $LibrariesPath
          git clone git://code.qt.io/qt/qt5.git qt$QT
          cd qt$QT
          perl init-repository --module-subset=qtbase,qtimageformats
          git checkout v5.12.8
          git submodule update qtbase
          git submodule update qtimageformats
          cd qtbase
          git apply ../../patches/qtbase_$QT.diff
          cd ..
          ./configure \
          -prefix "$QT_PREFIX" \
          -debug \
          -force-debug-info \
          -opensource \
          -confirm-license \
          -static \
          -opengl desktop \
          -no-openssl \
          -securetransport \
          -nomake examples \
          -nomake tests \
          -platform macx-clang
          make -j$(nproc)
          sudo make install
          make clean
          cp -r $QT_PREFIX $LibrariesPath/qt-cache
      - name: Find TON commit from doc.
        run: |
          echo "Find necessary commit from doc."
          echo ::set-env name=TON_COMMIT::`grep -A 1 "cd ton" $REPO_NAME/$DOC_PATH | sed -n 2p | awk '{print $3}'`
      - name: TON cache.
        id: cache-ton
        uses: actions/cache@v1
        with:
          path: ${{ env.LibrariesPath }}/ton
          key: ${{ runner.OS }}-${{ env.TON_COMMIT }}-${{ env.CACHE_KEY }}
      - name: TON build.
        if: steps.cache-ton.outputs.cache-hit != 'true'
        run: |
          cd $LibrariesPath

          git clone https://github.com/ton-blockchain/ton.git
          cd ton
          git checkout $TON_COMMIT
          git submodule init
          git submodule update third-party/crc32c
          mkdir build-debug
          cd build-debug
          
          cmake \
          -DTON_USE_ROCKSDB=OFF \
          -DTON_USE_ABSEIL=OFF \
          -DTON_ARCH= \
          -DTON_ONLY_TONLIB=ON \
          -DOPENSSL_FOUND=1 \
          -DOPENSSL_INCLUDE_DIR=$LibrariesPath/openssl_1_1_1/include \
          -DOPENSSL_CRYPTO_LIBRARY=$LibrariesPath/openssl_1_1_1/libcrypto.a \
          -DZLIB_FOUND=1 \
          -DZLIB_INCLUDE_DIR=$LibrariesPath/zlib \
          -DZLIB_LIBRARY=/usr/local/macos/lib/libz.a \
          -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=10.12 \
          -DCMAKE_CXX_FLAGS="-stdlib=libc++" \
          ..

          make -j$(nproc) tonlib
          cd ..
      - name: Wallet build.
        if: env.ONLY_CACHE == 'false'
        run: |
          cd $REPO_NAME/Wallet
          DEFINE=""
          if [ -n "${{ matrix.defines }}" ]; then
            DEFINE="-D ${{ matrix.defines }}=ON"
            echo Define from matrix: $DEFINE
          fi
          ./configure.sh -D DESKTOP_APP_USE_PACKAGED=OFF $DEFINE
          cd ../out
          xcoderun='xcodebuild build -project Wallet.xcodeproj -scheme Wallet -destination "platform=macOS,arch=x86_64" -configuration Debug'
          bash -c "$xcoderun" || bash -c "$xcoderun" || bash -c "$xcoderun"
      - name: Move artifact.
        if: env.UPLOAD_ARTIFACT == 'true'
        run: |
          cd $REPO_NAME/out/Debug
          mkdir artifact
          mv Wallet.app artifact/
          mv Updater artifact/
      - uses: actions/upload-artifact@master
        if: env.UPLOAD_ARTIFACT == 'true'
        name: Upload artifact.
        with:
          name: Wallet
          path: ${{ env.REPO_NAME }}/out/Debug/artifact/